use crate::ast::*;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  //r"/\*([^*]|\*[^/])*\*/" => {}, // 无法处理 /* **/
  r"/\*([^*]|(\*+([^*/])))*\*+/" => {},
  // 剩下的情况采用默认方式处理
  _
}


//CompUnit    ::= {CompItem};
pub CompUnit: CompUnit = <item: (CompItem)*> => CompUnit { <> };

//CompItem   ::= FuncDef | Decl;
CompItem: CompItem = {
  <func_def: FuncDef> => CompItem::FuncDef(<>),
  <decl: Decl> => CompItem::Decl(<>),
};


//FuncDef     ::= FuncType IDENT "(" [FuncFParams] ")" Block;
FuncDef: FuncDef = {
  "int" <ident: Ident> "(" <func_fparams: Comma<FuncFParam> > ")" 
    <block: Block> => FuncDef{func_type: FuncType::Int, <>},
  "void" <ident: Ident> "(" <func_fparams: Comma<FuncFParam> > ")" 
    <block: Block> => FuncDef{func_type: FuncType::Void, ident, func_fparams, block},  
  //FuncFParams ::= FuncFParam {"," FuncFParam};
};


//FuncFParam  ::= BType IDENT;
FuncFParam: FuncFParam = {
  "int" <ident: Ident> => FuncFParam{btype: BType::Int, <>},
};


//Block         ::= "{" {BlockItem} "}";
Block: Block = "{" <items: (BlockItem)*> "}" => Block { <> };

//BlockItem     ::= Decl | Stmt;
BlockItem: BlockItem = {
    <decl: Decl> => BlockItem::Decl(decl),
    <stmt: Stmt> => BlockItem::Stmt(stmt),
};


//Stmt ::= MatchedStmt
//       | OpenStmt
Stmt: Stmt = {
    <matched_stmt: MatchedStmt> => matched_stmt,
    <open_stmt: OpenStmt> => open_stmt,
};

//MatchedStmt ::= LVal "=" Exp ";"
//              | [Exp] ";"
//              | Block
//              | "if" "(" Exp ")" MatchedStmt "else" MatchedStmt
//              | "return" [Exp] ";";
//              | "while" "(" Exp ")" MatchedStmt
//              | "break" ";"
//              | "continue" ";"
MatchedStmt: Stmt = {
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(lval, exp),
    <exp: (Exp)?> ";" => Stmt::Exp(<>),
    Block => Stmt::Block(<>),
    "if" "(" <exp: Exp> ")" <then_stmt: MatchedStmt> "else" <else_stmt: MatchedStmt>
       => Stmt::If(exp, Box::new(then_stmt), Some(Box::new(else_stmt))),
    "return" <exp: (Exp)?> ";" => Stmt::RetExp(<>),
    "while" "(" <exp: Exp> ")" <stmt: MatchedStmt> => Stmt::While(exp, Box::new(stmt)),
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,
};

//OpenStmt ::= "if" "(" Exp ")" Stmt
//           | "if" "(" Exp ")" MatchedStmt "else" OpenStmt
//           | "while" "(" Exp ")" OpenStmt
OpenStmt: Stmt = {
    "if" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::If(exp, Box::new(stmt), None),
    "if" "(" <exp: Exp> ")" <then_stmt: MatchedStmt> "else" <else_stmt: OpenStmt>
       => Stmt::If(exp, Box::new(then_stmt), Some(Box::new(else_stmt))),
    "while" "(" <exp: Exp> ")" <stmt: OpenStmt> => Stmt::While(exp, Box::new(stmt)),
};


//LVal          ::= IDENT {"[" Exp "]"};
LVal: LVal = {
    <ident: Ident> < dims : ("[" <Exp> "]")*> => LVal{<>},
};

Number: i32 = {
    <num: IntConst> => <>,   
};


// 也是IDENT
Ident: String = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string(),   
};

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

//Exp         ::= LOrExp;
Exp: Exp = {
  <lor_exp : LOrExp> => {
    Exp::LOrExp(Box::new(lor_exp))
  }
};

//UnaryOp     ::= "+" | "-" | "!";
UnaryOp: UnaryOp = {
  "-" => UnaryOp::Neg,
  "+" => UnaryOp::Pos,
  "!" => UnaryOp::Not,
}

//BinaryAddOp    ::= "+" | "-" ;
BinaryAddOp: BinaryAddOp = {
  "+" => BinaryAddOp::Add,
  "-" => BinaryAddOp::Sub,
}

//BinaryMulOP    ::= "*" | "/" | "%" ;
BinaryMulOp: BinaryMulOp = {
  "*" => BinaryMulOp::Mul,
  "/" => BinaryMulOp::Div,
  "%" => BinaryMulOp::Mod,
}

//UnaryExp    ::= PrimaryExp
//             | UnaryOp UnaryExp;
//             | IDENT "(" [FuncRParams] ")"
UnaryExp: UnaryExp = {
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(Box::new(primary_exp)),
  <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::BinaryOp(unary_op, Box::new(unary_exp)),
  <ident: Ident> "(" <func_rparams: Comma<Exp> > ")" //FuncRParams ::= Exp {"," Exp};
    => UnaryExp::Call(ident, func_rparams),
}


//PrimaryExp    ::= "(" Exp ")" | LVal | Number;
PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::Bexp(Box::new(exp)),
  <lval: LVal> => PrimaryExp::LVal(lval),
  <num: Number> => PrimaryExp::Number(<>),
}

//MulExp      ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
MulExp: MulExp = {
  <unary_exp: UnaryExp> => MulExp::UnaryExp(Box::new(unary_exp)),
  <mul_exp: MulExp> <op: BinaryMulOp> <unary_exp: UnaryExp> => MulExp::BinaryExp(Box::new(mul_exp), op, Box::new(unary_exp)),
}

//AddExp      ::= MulExp | AddExp ("+" | "-") MulExp;
AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp::MulExp(Box::new(mul_exp)),
  <add_exp: AddExp> <op: BinaryAddOp> <mul_exp: MulExp> => AddExp::BinaryExp(Box::new(add_exp), op, Box::new(mul_exp)),
}

//BinaryRelOp ::= "<" | ">" | "<=" | ">=" ;
BinaryRelOp: BinaryRelOp = {
  "<" => BinaryRelOp::Lt,
  ">" => BinaryRelOp::Gt,
  "<=" => BinaryRelOp::Le,
  ">=" => BinaryRelOp::Ge,
}

//RelExp      ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
RelExp: RelExp = {
  <add_exp: AddExp> => RelExp::AddExp(Box::new(add_exp)),
  <rel_exp: RelExp> <op: BinaryRelOp> <add_exp: AddExp> => RelExp::BinaryExp(Box::new(rel_exp), op, Box::new(add_exp)),
}

//BinaryEqOp  ::= "==" | "!=" ;
BinaryEqOp: BinaryEqOp = {
  "==" => BinaryEqOp::Eq,
  "!=" => BinaryEqOp::Ne,
}

//EqExp       ::= RelExp | EqExp ("==" | "!=") RelExp;
EqExp: EqExp = {
  <rel_exp: RelExp> => EqExp::RelExp(Box::new(rel_exp)),
  <eq_exp: EqExp> <op: BinaryEqOp> <rel_exp: RelExp> => EqExp::BinaryExp(Box::new(eq_exp), op, Box::new(rel_exp)),
}

//LAndExp     ::= EqExp | LAndExp "&&" EqExp;
LAndExp: LAndExp = {
  <eq_exp: EqExp> => LAndExp::EqExp(Box::new(eq_exp)),
  <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::BinaryExp(Box::new(land_exp), Box::new(eq_exp)),
}

//LOrExp      ::= LAndExp | LOrExp "||" LAndExp;
LOrExp: LOrExp = {
  <land_exp: LAndExp> => LOrExp::LAndExp(Box::new(land_exp)),
  <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::BinaryExp(Box::new(lor_exp), Box::new(land_exp)),
}



//Decl          ::= ConstDecl | VarDecl;
Decl: Decl = {
  <const_decl: ConstDecl> => Decl::ConstDecl(const_decl),
  <var_decl: VarDecl> => Decl::VarDecl(var_decl),
}


//ConstDecl     ::= "const" BType ConstDef {"," ConstDef} ";";
ConstDecl: ConstDecl = {
  "const" "int" <constdef_s: Comma<ConstDef> > ";" => {
    ConstDecl::ConstDeclS(BType::Int, constdef_s)
  }
} 

//Comma宏
//用于识别空或T或T,T,...,T的字符串，返回Vec<T>
//见https://yuhanawa.github.io/posts/2023/57877/#6-%E5%AE%8F-Macros
Comma<T>: Vec<T> = {
  <mut v:(<T> ",")*> <e:T?> => match e {
    None => v,
    Some(e) => {
        v.push(e);
        v
    }
  }
}

//由于移进规约冲突，省掉了
//BType         ::= "int";
//BType: BType = {
//  "int" => BType::Int,
//}

//ConstDef      ::= IDENT {"[" ConstExp "]"} "=" ConstInitVal;
ConstDef: ConstDef = {
  <ident: Ident> < dims : ("[" <ConstExp> "]")* > "=" <const_init_val: ConstInitVal> => {
    ConstDef{<>}
  }
}

//ConstInitVal  ::= ConstExp | "{" [ConstInitVal {"," ConstInitVal}] "}";
ConstInitVal: ConstInitVal = {
  <const_exp: ConstExp> => ConstInitVal::ConstExp(const_exp),
  "{" <const_init_val_s: Comma<ConstInitVal> > "}" => ConstInitVal::ConstInitValS(const_init_val_s),
}

//ConstExp      ::= Exp;
ConstExp: ConstExp = {
  <exp: Exp> => ConstExp::Exp(exp)
}

//VarDecl       ::= BType VarDef {"," VarDef} ";";
VarDecl: VarDecl = {
  "int" <vardef_s: Comma<VarDef> > ";" => {
    VarDecl::VarDeclS(BType::Int, vardef_s)
  }
}

//VarDef        ::= IDENT {"[" ConstExp "]"}
//                | IDENT {"[" ConstExp "]"} "=" InitVal;
VarDef: VarDef = {
  <ident: Ident> < dims : ("[" <ConstExp> "]")* > => {
    VarDef::NoInit(ident, dims)
  },
  <ident: Ident> < dims : ("[" <ConstExp> "]")* > "=" <init_val: InitVal> => {
    VarDef::Init(ident, dims, init_val)
  },
}


//InitVal       ::= Exp | "{" [InitVal {"," InitVal}] "}";
InitVal: InitVal = {
  <exp: Exp> => InitVal::Exp(exp),
  "{" <init_val_s: Comma<InitVal> > "}" => InitVal::InitValS(init_val_s),
}

