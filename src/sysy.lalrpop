use crate::ast::*;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  //r"/\*([^*]|\*[^/])*\*/" => {}, // 无法处理 /* **/
  r"/\*([^*]|(\*+([^*/])))*\*+/" => {},
  // 剩下的情况采用默认方式处理
  _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
//pub CompUnit: String = <func_def: FuncDef> => func_def;
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = {
    "int" => FuncType::Int,
};


Block: Block = {
    "{" <stmt: Stmt> "}" => Block { <> },
};

//Stmt        ::= "return" Exp ";";
Stmt: Stmt = {
    "return" <exp: Exp> ";" => Stmt::RetExp(exp),
};

Number: i32 = {
    <num: IntConst> => <>,   
};

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string(),   
};

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

///Exp         ::= UnaryExp;
Exp: Exp = {
  <unary_exp : UnaryExp> => {
    Exp::UnaryExp(<>)
  }
};


//UnaryOp     ::= "+" | "-" | "!";
UnaryOp: UnaryOp = {
  "-" => UnaryOp::Neg,
  "+" => UnaryOp::Pos,
  "!" => UnaryOp::Not,
}

//naryExp    ::= PrimaryExp | UnaryOp UnaryExp;
UnaryExp: UnaryExp = {
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(Box::new(primary_exp)),
  <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::BinaryOp(unary_op, Box::new(unary_exp)),
}

//PrimaryExp  ::= "(" Exp ")" | Number;
PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::Bexp(Box::new(exp)),
  <num: Number> => PrimaryExp::Number(<>),
}
